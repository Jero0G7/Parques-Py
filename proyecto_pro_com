{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNs+2CM2lw5HDrHiP9Sc6z6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jero0G7/Parques-Py/blob/main/proyecto_pro_com\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JU214O24VE-6"
      },
      "outputs": [],
      "source": [
        "# main.py\n",
        "from motor_juego import Juego\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    juego = Juego()\n",
        "    juego.iniciar()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# motor_juego.py\n",
        "from jugador import Jugador\n",
        "from tablero import Tablero\n",
        "from dados import Dados\n",
        "\n",
        "class Juego:\n",
        "    def __init__(self):\n",
        "        self.jugadores = []\n",
        "        self.tablero = Tablero()\n",
        "        self.dados = Dados()\n",
        "        self.turno_actual = 0\n",
        "\n",
        "    def iniciar(self):\n",
        "        print(\"Bienvenido a Parqués UN - Consola\")\n",
        "        self.configurar_jugadores()\n",
        "        self.bucle_juego()\n",
        "\n",
        "    def configurar_jugadores(self):\n",
        "        num_jugadores = int(input(\"Ingrese el número de jugadores (2 a 4): \"))\n",
        "        colores = [\"Rojo\", \"Azul\", \"Verde\", \"Amarillo\"]\n",
        "        for i in range(num_jugadores):\n",
        "            nombre = input(f\"Nombre del jugador {i+1}: \")\n",
        "            jugador = Jugador(nombre, colores[i])\n",
        "            self.jugadores.append(jugador)\n",
        "\n",
        "    def bucle_juego(self):\n",
        "        juego_terminado = False\n",
        "        while not juego_terminado:\n",
        "            jugador = self.jugadores[self.turno_actual]\n",
        "            print(f\"\\nTurno de {jugador.nombre} ({jugador.color})\")\n",
        "            dado1, dado2 = self.dados.lanzar()\n",
        "            print(f\"Dados: {dado1} y {dado2}\")\n",
        "            # Aquí se incluirá lógica de movimiento de fichas\n",
        "            self.turno_actual = (self.turno_actual + 1) % len(self.jugadores)\n"
      ],
      "metadata": {
        "id": "__N3KdRhVvrp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# jugador.py\n",
        "from ficha import Ficha\n",
        "\n",
        "class Jugador:\n",
        "    def __init__(self, nombre, color):\n",
        "        self.nombre = nombre\n",
        "        self.color = color\n",
        "        self.fichas = [Ficha(color, i) for i in range(4)]\n",
        "        self.fichas_en_casa = 4\n",
        "        self.fichas_en_juego = 0\n",
        "        self.fichas_en_meta = 0\n",
        "\n",
        "    def mostrar_estado(self):\n",
        "        print(f\"Jugador: {self.nombre} ({self.color})\")\n",
        "        for ficha in self.fichas:\n",
        "            print(f\"Ficha {ficha.id}: {ficha.estado} en posición {ficha.posicion}\")\n",
        "\n",
        "    def tiene_movimientos_posibles(self, dados):\n",
        "        # Esta función evaluará si hay alguna ficha que se pueda mover\n",
        "        return True  # Placeholder por ahora\n"
      ],
      "metadata": {
        "id": "CzoD7c1xV2z3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ficha.py\n",
        "\n",
        "class Ficha:\n",
        "    def __init__(self, color, id):\n",
        "        self.color = color\n",
        "        self.id = id\n",
        "        self.estado = 'casa'  # casa, juego, carcel, llegada\n",
        "        self.posicion = -1    # -1 para casa, 0-67 para casillas, 100+ para llegada\n",
        "\n",
        "    def mover_a_juego(self, posicion_salida):\n",
        "        self.estado = 'juego'\n",
        "        self.posicion = posicion_salida\n",
        "\n",
        "    def mover(self, pasos):\n",
        "        if self.estado == 'juego':\n",
        "            self.posicion += pasos\n",
        "\n",
        "    def enviar_a_carcel(self):\n",
        "        self.estado = 'carcel'\n",
        "        self.posicion = -1\n",
        "\n",
        "    def llegar_a_meta(self):\n",
        "        self.estado = 'llegada'\n",
        "        self.posicion = 100 + self.id  # Representación única de la llegada\n",
        "\n",
        "    def esta_en_seguro(self, seguros):\n",
        "        return self.posicion in seguros"
      ],
      "metadata": {
        "id": "fXaEaDwfV7pb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# tablero.py\n",
        "\n",
        "class Tablero:\n",
        "    def __init__(self):\n",
        "        self.casillas = [None for _ in range(68)]  # Casillas del 1 al 68\n",
        "        self.seguros = [5, 12, 17, 22, 29, 34, 39, 46, 51, 56, 63, 68]  # Ejemplo\n",
        "        self.llegadas = {\n",
        "            \"Rojo\": [100, 101, 102, 103, 104, 105, 106, 107],\n",
        "            \"Azul\": [110, 111, 112, 113, 114, 115, 116, 117],\n",
        "            \"Verde\": [120, 121, 122, 123, 124, 125, 126, 127],\n",
        "            \"Amarillo\": [130, 131, 132, 133, 134, 135, 136, 137]\n",
        "        }\n",
        "        self.salidas = {\n",
        "            \"Rojo\": 0,\n",
        "            \"Azul\": 17,\n",
        "            \"Verde\": 34,\n",
        "            \"Amarillo\": 51\n",
        "        }\n",
        "\n",
        "    def es_seguro(self, posicion):\n",
        "        return posicion in self.seguros\n",
        "\n",
        "    def obtener_salida(self, color):\n",
        "        return self.salidas.get(color, 0)\n",
        "\n",
        "    def obtener_llegada(self, color):\n",
        "        return self.llegadas.get(color, [])"
      ],
      "metadata": {
        "id": "1qx2nOzzWHyT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# dados.py\n",
        "import random\n",
        "\n",
        "class Dados:\n",
        "    def __init__(self):\n",
        "        self.historial = []\n",
        "\n",
        "    def lanzar(self):\n",
        "        d1 = random.randint(1, 6)\n",
        "        d2 = random.randint(1, 6)\n",
        "        self.historial.append((d1, d2))\n",
        "        if len(self.historial) > 3:\n",
        "            self.historial.pop(0)\n",
        "        return d1, d2\n",
        "\n",
        "    def es_par(self):\n",
        "        if not self.historial:\n",
        "            return False\n",
        "        d1, d2 = self.historial[-1]\n",
        "        return d1 == d2\n",
        "\n",
        "    def tres_pares_consecutivos(self):\n",
        "        return len(self.historial) == 3 and all(d1 == d2 for d1, d2 in self.historial)"
      ],
      "metadata": {
        "id": "aCKQJLlJWjl8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# motor_juego.py\n",
        "from jugador import Jugador\n",
        "from tablero import Tablero\n",
        "from dados import Dados\n",
        "\n",
        "class Juego:\n",
        "    def __init__(self):\n",
        "        self.jugadores = []\n",
        "        self.tablero = Tablero()\n",
        "        self.dados = Dados()\n",
        "        self.turno_actual = 0\n",
        "\n",
        "    def iniciar(self):\n",
        "        print(\"Bienvenido a Parqués UN - Consola\")\n",
        "        self.configurar_jugadores()\n",
        "        self.bucle_juego()\n",
        "\n",
        "    def configurar_jugadores(self):\n",
        "        num_jugadores = int(input(\"Ingrese el número de jugadores (2 a 4): \"))\n",
        "        colores = [\"Rojo\", \"Azul\", \"Verde\", \"Amarillo\"]\n",
        "        for i in range(num_jugadores):\n",
        "            nombre = input(f\"Nombre del jugador {i+1}: \")\n",
        "            jugador = Jugador(nombre, colores[i])\n",
        "            self.jugadores.append(jugador)\n",
        "\n",
        "    def bucle_juego(self):\n",
        "        juego_terminado = False\n",
        "        while not juego_terminado:\n",
        "            jugador = self.jugadores[self.turno_actual]\n",
        "            print(f\"\\nTurno de {jugador.nombre} ({jugador.color})\")\n",
        "            dado1, dado2 = self.dados.lanzar()\n",
        "            print(f\"Dados: {dado1} y {dado2}\")\n",
        "            self.realizar_turno(jugador, dado1, dado2)\n",
        "            self.turno_actual = (self.turno_actual + 1) % len(self.jugadores)\n",
        "\n",
        "    def realizar_turno(self, jugador, dado1, dado2):\n",
        "        total = dado1 + dado2\n",
        "        salida = self.tablero.obtener_salida(jugador.color)\n",
        "\n",
        "        # Intentar sacar ficha con un 5\n",
        "        puede_sacar = 5 in (dado1, dado2) or total == 5\n",
        "        fichas_en_casa = [f for f in jugador.fichas if f.estado == 'casa']\n",
        "        espacio_libre = all(\n",
        "            not any(f.posicion == salida for f in j.fichas if f.estado == 'juego')\n",
        "            or sum(1 for f in j.fichas if f.estado == 'juego' and f.posicion == salida) < 2\n",
        "            for j in self.jugadores\n",
        "        )\n",
        "\n",
        "        if puede_sacar and fichas_en_casa and espacio_libre:\n",
        "            ficha = fichas_en_casa[0]\n",
        "            ficha.mover_a_juego(salida)\n",
        "            jugador.fichas_en_casa -= 1\n",
        "            jugador.fichas_en_juego += 1\n",
        "            print(f\"{jugador.nombre} ha sacado la ficha {ficha.id} a la posición {salida}.\")\n",
        "            return\n",
        "\n",
        "        # Mover fichas en juego\n",
        "        fichas_en_juego = [f for f in jugador.fichas if f.estado == 'juego']\n",
        "        if not fichas_en_juego:\n",
        "            print(\"No hay movimientos posibles. Turno perdido.\")\n",
        "            return\n",
        "\n",
        "        print(\"Fichas en juego disponibles para mover:\")\n",
        "        for i, ficha in enumerate(fichas_en_juego):\n",
        "            print(f\"{i + 1}: Ficha {ficha.id} en posición {ficha.posicion}\")\n",
        "\n",
        "        eleccion = int(input(\"Seleccione el número de la ficha que desea mover: \")) - 1\n",
        "        if 0 <= eleccion < len(fichas_en_juego):\n",
        "            ficha = fichas_en_juego[eleccion]\n",
        "            ficha.mover(total)\n",
        "            print(f\"Ficha {ficha.id} movida a posición {ficha.posicion}.\")\n",
        "        else:\n",
        "            print(\"Selección inválida. Turno perdido.\")"
      ],
      "metadata": {
        "id": "1_RtsR0QYhKf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "aSmE3VPVYv41"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}